// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	definitions "github.com/sparkymat/markit/definitions"

	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Find provides a mock function with given fields: c, id
func (_m *User) Find(c echo.Context, id string) (*definitions.User, error) {
	ret := _m.Called(c, id)

	var r0 *definitions.User
	if rf, ok := ret.Get(0).(func(echo.Context, string) *definitions.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*definitions.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: c, username
func (_m *User) FindByUsername(c echo.Context, username string) (*definitions.User, error) {
	ret := _m.Called(c, username)

	var r0 *definitions.User
	if rf, ok := ret.Get(0).(func(echo.Context, string) *definitions.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*definitions.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
